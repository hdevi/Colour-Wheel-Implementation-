/*
 * peripherals.c
 *
 *  Created on: 20-Jan-2018
 *      Author: HIMAN
 */
#include "peripherals.h"

hsv data_hsv = { 0, 255 , 255 };
rgb data_rgb;
uint16_t rgb_v;
uint32_t segdisp;

uint16_t ledvalue;
/* Function to calculate duty cycle from hardware detection and display on seven segment display*/
int hardware_detect(void)
{
	gpio1_in1 = XGpio_DiscreteRead(&GPIOInst1,GPIO_1_INPUT_0_CHANNEL);
	gpio1_in2 = XGpio_DiscreteRead(&GPIOInst1,GPIO_1_INPUT_1_CHANNEL);
	gpio2_in1 = XGpio_DiscreteRead(&GPIOInst2,GPIO_2_INPUT_0_CHANNEL);
	gpio2_in2 = XGpio_DiscreteRead(&GPIOInst2,GPIO_2_INPUT_1_CHANNEL);
	gpio3_in1 = XGpio_DiscreteRead(&GPIOInst3,GPIO_3_INPUT_0_CHANNEL);
	gpio3_in2 = XGpio_DiscreteRead(&GPIOInst3,GPIO_3_INPUT_1_CHANNEL);
	//xil_printf("gpio1_in0 = %d |gpio1_in1 = %d |gpio2_in0 = %d |gpio2_in1 = %d |gpio3_in0 = %d |gpio3_in1 = %d ",gpio1_in0,gpio1_in1,gpio2_in0,gpio2_in1,gpio3_in0,gpio3_in1);
	uint8_t hw_duty_cycle_red=gpio1_in1*100*8/(gpio1_in1+gpio1_in2);
	uint8_t hw_duty_cycle_blue=gpio2_in1*100*8/(gpio2_in1+gpio2_in2);
	uint8_t hw_duty_cycle_green=gpio3_in1*100*4/(gpio3_in1+gpio3_in2);
	//xil_printf("Red = %d | Blue = %d | Green = %d\n",hw_duty_cycle_red,hw_duty_cycle_blue,hw_duty_cycle_green);

	if(disp==1)
	{
		SevenSeg_display(hw_duty_cycle_red,hw_duty_cycle_green,hw_duty_cycle_blue);
		usleep(1000);
	}
	return 0;
}

/* Function to calculate duty cycle from software detection and display on seven segment display*/
/*void software_detect(void)
{

	uint8_t sw_duty_cycle_red= final_red_high*100/(final_red_high + final_red_low );
	xil_printf("Red: %d | Final-H: %d | Final-L: %d\n",sw_duty_cycle_red,final_red_high,final_red_low);
	uint8_t sw_duty_cycle_blue= final_blue_high*100*8.25/(final_blue_high + final_blue_low );
	//xil_printf("Blue: %d\n",duty_cycle_blue);
	uint8_t sw_duty_cycle_green= final_green_high*100*4.1/(final_green_high + final_green_low);
	//xil_printf("Green: %d\n",duty_cycle_green);

	if (disp==1)
	{
		SevenSeg_display(sw_duty_cycle_red,sw_duty_cycle_green,sw_duty_cycle_blue);
	}
}*/
void software_detect(void)
{
    uint8_t duty_cycle_red= sw_high_red*100*8.25/(sw_low_red + sw_high_red );
	uint8_t duty_cycle_blue= sw_high_blue*100*8.25/(sw_low_blue + sw_high_blue );
	uint8_t duty_cycle_green= sw_high_green*100*4.1/(sw_low_green + sw_high_green );

	if (disp==1)
	{

	//xil_printf("\nDuty cycles for red green blue are %d,%d,%d",duty_cycle_red,duty_cycle_green,duty_cycle_blue);
		SevenSeg_display(duty_cycle_red,duty_cycle_green,duty_cycle_blue);

	}
}


/*void software_detect(void)
{
	//local variables
	int i;


	/*****Average and ampling for the count values-the ON time*****/
	/*for (i= COUNT; i> 0; i--)
	{
		if(((gpio_in >> 2) & 0x01) == 1  )//check if red bit is on
		{
			final_red_high = final_red_high + 1;//if yes, increment red counter
		}

		if(((gpio_in >> 1) & 0x01) == 1  )//check if green bit is on
		{
			final_green_high = final_green_high + 1;//if yes, increment green counter

		}

		if((gpio_in  & 0x01) == 1  )//check if blue bit is on
		{
			final_blue_high = final_blue_high + 1;//if yes, increment blue counter
		}

	}*/

	/*uint8_t sw_duty_cycle_red = (final_red_high/700);//calculate duty cycle for red
	uint8_t sw_duty_cycle_green = (final_green_high)/700;//calculate duty cycle for green
	uint8_t sw_duty_cycle_blue = (final_blue_high)/700;//calculate duty cycle for blue
	//xil_printf("pwm_red = %d \n",pwm_red);//print  to console duty cycle value of red
	//xil_printf("pwm_green = %d \n",pwm_green);//print  to console duty cycle value of green
	//xil_printf("pwm_blue = %d \n",pwm_blue);//print  to console duty cycle value of blue

	SevenSeg_display(sw_duty_cycle_red,sw_duty_cycle_green,sw_duty_cycle_blue);


	//reset for next iteration
	final_red_high = 0;
	final_green_high = 0;
	final_blue_high = 0;

	return;

}*/
/****************************************************************************

Displays Hue,Saturation and Value values and a rectangle on the display

 *****************************************************************************/

void Oled_display(hsv datahsv)

{
	OLEDrgb_Clear(&pmodOLEDrgb_inst);

	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 1);
	OLEDrgb_PutString(&pmodOLEDrgb_inst, "Hue: ");
	PMDIO_putnum(&pmodOLEDrgb_inst, data_hsv.hue, 10);

	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 3);
	OLEDrgb_PutString(&pmodOLEDrgb_inst, "Sat: ");
	PMDIO_putnum(&pmodOLEDrgb_inst, data_hsv.sat, 10);

	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 5);
	OLEDrgb_PutString(&pmodOLEDrgb_inst, "Val: ");
	PMDIO_putnum(&pmodOLEDrgb_inst, data_hsv.val, 10);

	OLEDrgb_DrawRectangle(&pmodOLEDrgb_inst, 65, 15, 85, 30, OLEDrgb_BuildHSV(data_hsv.hue,data_hsv.sat,data_hsv.val), true, OLEDrgb_BuildHSV(data_hsv.hue,data_hsv.sat,data_hsv.val));

}

/****************************************************************************

Seven segment display function
Displays RR GG BB on the 8 segments

*****************************************************************************/
void SevenSeg_display(uint8_t red,uint8_t green, uint8_t blue)
{

	// clear all the decimal points
	NX4IO_SSEG_setDecPt(SSEGLO, DIGIT7, false);
	NX4IO_SSEG_setDecPt(SSEGLO, DIGIT6, false);
	NX4IO_SSEG_setDecPt(SSEGLO, DIGIT5, false);
	NX4IO_SSEG_setDecPt(SSEGLO, DIGIT4, false);
	NX4IO_SSEG_setDecPt(SSEGHI, DIGIT3, false);
	NX4IO_SSEG_setDecPt(SSEGHI, DIGIT2, false);
	NX4IO_SSEG_setDecPt(SSEGHI, DIGIT1, false);
	NX4IO_SSEG_setDecPt(SSEGHI, DIGIT0, false);

	NX4IO_SSEG_setDigit(SSEGHI, DIGIT7, (red/10));
    NX4IO_SSEG_setDigit(SSEGHI, DIGIT6, (red%10));
    //xil_printf("Red: %d | %d\n",red/10,red%10);
	NX4IO_SSEG_setDigit(SSEGHI, DIGIT4, (green/10));
	NX4IO_SSEG_setDigit(SSEGLO, DIGIT3, (green%10));
	// xil_printf("Green: %d | %d\n",green/10,green%10);
	NX4IO_SSEG_setDigit(SSEGLO, DIGIT1, (blue/10));
    NX4IO_SSEG_setDigit(SSEGLO, DIGIT0, (blue%10));
    //xil_printf("Blue: %d | %d\n",blue/10,blue%10);
    NX4IO_SSEG_setDigit(SSEGHI, DIGIT5, CC_BLANK);
    NX4IO_SSEG_setDigit(SSEGLO, DIGIT2, CC_BLANK);

	return;

}

void initial_display()
{
	OLEDrgb_Clear(&pmodOLEDrgb_inst);
	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 1);
	OLEDrgb_PutString(&pmodOLEDrgb_inst, "Welcome to");

	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 3);
	OLEDrgb_PutString(&pmodOLEDrgb_inst, "ECE 544");

	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 5);
	OLEDrgb_PutString(&pmodOLEDrgb_inst, "Project 1");

	OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 7);
	OLEDrgb_PutString(&pmodOLEDrgb_inst, "ColourWheel");
}

void exit_display()
{
		OLEDrgb_Clear(&pmodOLEDrgb_inst);
		OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 1);
		OLEDrgb_PutString(&pmodOLEDrgb_inst, "Thank You");

		OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 3);
		OLEDrgb_PutString(&pmodOLEDrgb_inst, "Done By");

		OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 5);
		OLEDrgb_PutString(&pmodOLEDrgb_inst, "Himanshu");

		OLEDrgb_SetCursor(&pmodOLEDrgb_inst, 0, 7);
		OLEDrgb_PutString(&pmodOLEDrgb_inst, "Devi");
}

void peripherals_exit()
{
				NX410_SSEG_setAllDigits(SSEGHI, CC_BLANK, CC_B, CC_LCY, CC_E, DP_NONE);
				NX410_SSEG_setAllDigits(SSEGLO, CC_B, CC_LCY, CC_E, CC_BLANK, DP_NONE);
				usleep(5000 * 100);
				NX4IO_RGBLED_setChnlEn(RGB1, false,false,false);
				NX4IO_RGBLED_setChnlEn(RGB2, false,false,false);
				// shift a 1 through all of the leds
					ledvalue = 0x0040;
					do
					{
						NX4IO_setLEDs(ledvalue);
						usleep(5000);
						ledvalue = ledvalue << 1;
					} while (ledvalue != 0);
					OLEDrgb_Clear(&pmodOLEDrgb_inst);
					OLEDrgb_end(&pmodOLEDrgb_inst);
}

/****************************************************************************/
/**
* GetHSV -takes the HSV values from rotary encoder and push buttons and calls PWM functions
*
*****************************************************************************/
void GetHSV_value(void)
{
	int  RotaryIncr;

	bool RotaryNoNeg;

	// test the rotary encoder functions
	RotaryIncr = 1;
	RotaryNoNeg = false;

	initial_display();
	// Initialize the rotary encoder
	// clear the counter of the encoder if initialized to garbage value on power on
	pmodENC_init(&pmodENC_inst, RotaryIncr, RotaryNoNeg);
	pmodENC_clear_count(&pmodENC_inst);


	while(1)
	{

		hsv temp_hsv = data_hsv;
		// read the new value from the rotary encoder and show it on the display
		pmodENC_read_count(&pmodENC_inst, &RotaryCnt);
		uint16_t ledcnt = (RotaryCnt  & 0x00FF) << 6;
		NX4IO_setLEDs(ledcnt);
		// exit the loop if button is pressed is pressed.
		if ( pmodENC_is_button_pressed(&pmodENC_inst) )
		{
			xil_printf("\n exiting loop");
			exit_display();
			peripherals_exit();
			break;
		}

		data_hsv.hue = RotaryCnt;

		/* Buttons are used to adjust S and V values*/
		if (NX4IO_isPressed(BTNU))
					data_hsv.val ++;

		else if (NX4IO_isPressed(BTNR))
					data_hsv.sat ++;

		else if (NX4IO_isPressed(BTNL))
					data_hsv.sat--;

		else if (NX4IO_isPressed(BTND))
					data_hsv.val--;


		/* Algorithm to extract RGB values from HSV*/

		rgb_v = OLEDrgb_BuildHSV(data_hsv.hue,data_hsv.sat,data_hsv.val);
		data_rgb.red=OLEDrgb_ExtractRFromRGB(rgb_v);
		data_rgb.green=OLEDrgb_ExtractGFromRGB(rgb_v);
		data_rgb.blue=OLEDrgb_ExtractBFromRGB(rgb_v);

		/* display HSV duty cycle on OLED display and drive LED*/

		if (!compare_hsv(temp_hsv,data_hsv))
		{
			Oled_display(data_hsv);
			NX4IO_RGBLED_setChnlEn(RGB1, true, true, true);
			NX4IO_RGBLED_setDutyCycle(RGB1, data_rgb.red, data_rgb.green, data_rgb.blue);
			NX4IO_RGBLED_setChnlEn(RGB2, true, true, true);
			NX4IO_RGBLED_setDutyCycle(RGB2, data_rgb.red, data_rgb.green, data_rgb.blue);

		}

		/* check switch status for sw/hw */

		ledvalue = NX4IO_getSwitches();
		NX4IO_setLEDs(ledvalue);

		if(ledvalue==1)
			hardware_detect();
		else
			software_detect();



	}  //exit the loop




	NX410_SSEG_setAllDigits(SSEGLO, CC_BLANK, CC_BLANK, CC_BLANK, CC_BLANK, DP_NONE);
	NX410_SSEG_setAllDigits(SSEGHI, CC_BLANK, CC_BLANK, CC_BLANK, CC_BLANK, DP_NONE);
	usleep(5000);

}

//Compare HSV values
int compare_hsv( hsv old,hsv new)
{
	if(old.hue == new.hue && old.sat == new.sat && old.val == new.val)
		return 1;
	else
		return 0;
}

/*********************** DISPLAY-RELATED FUNCTIONS ***********************************/

/****************************************************************************/
/**
* Converts an integer to ASCII characters
*
* algorithm borrowed from ReactOS system libraries
*
* Converts an integer to ASCII in the specified base.  Assumes string[] is
* long enough to hold the result plus the terminating null
*
* @param 	value is the integer to convert
* @param 	*string is a pointer to a buffer large enough to hold the converted number plus
*  			the terminating null
* @param	radix is the base to use in conversion,
*
* @return  *NONE*
*
* @note
* No size check is done on the return string size.  Make sure you leave room
* for the full string plus the terminating null in string
*****************************************************************************/
void PMDIO_itoa(int32_t value, char *string, int32_t radix)
{
	char tmp[33];
	char *tp = tmp;
	int32_t i;
	uint32_t v;
	int32_t  sign;
	char *sp;

	if (radix > 36 || radix <= 1)
	{
		return;
	}

	sign = ((10 == radix) && (value < 0));
	if (sign)
	{
		v = -value;
	}
	else
	{
		v = (uint32_t) value;
	}

  	while (v || tp == tmp)
  	{
		i = v % radix;
		v = v / radix;
		if (i < 10)
		{
			*tp++ = i+'0';
		}
		else
		{
			*tp++ = i + 'a' - 10;
		}
	}
	sp = string;

	if (sign)
		*sp++ = '-';

	while (tp > tmp)
		*sp++ = *--tp;
	*sp = 0;

  	return;
}


/****************************************************************************/
/**
* Write a 32-bit unsigned hex number to PmodOLEDrgb in Hex
*
* Writes  32-bit unsigned number to the pmodOLEDrgb display starting at the current
* cursor position.
*
* @param num is the number to display as a hex value
*
* @return  *NONE*
*
* @note
* No size checking is done to make sure the string will fit into a single line,
* or the entire display, for that matter.  Watch your string sizes.
*****************************************************************************/
void PMDIO_puthex(PmodOLEDrgb* InstancePtr, uint32_t num)
{
  char  buf[9];
  int32_t   cnt;
  char  *ptr;
  int32_t  digit;

  ptr = buf;
  for (cnt = 7; cnt >= 0; cnt--) {
    digit = (num >> (cnt * 4)) & 0xF;

    if (digit <= 9)
	{
      *ptr++ = (char) ('0' + digit);
	}
    else
	{
      *ptr++ = (char) ('a' - 10 + digit);
	}
  }

  *ptr = (char) 0;
  OLEDrgb_PutString(InstancePtr,buf);

  return;
}

/****************************************************************************/
/**
* Write a 32-bit number in Radix "radix" to LCD display
*
* Writes a 32-bit number to the LCD display starting at the current
* cursor position. "radix" is the base to output the number in.
*
* @param num is the number to display
*
* @param radix is the radix to display number in
*
* @return *NONE*
*
* @note
* No size checking is done to make sure the string will fit into a single line,
* or the entire display, for that matter.  Watch your string sizes.
*****************************************************************************/
void PMDIO_putnum(PmodOLEDrgb* InstancePtr, int32_t num, int32_t radix)
{
  char  buf[16];

  PMDIO_itoa(num, buf, radix);
  OLEDrgb_PutString(InstancePtr,buf);

  return;
}

/****************************************************************************/
/**
* insert delay (in microseconds) between instructions.
*
* This function should be in libc but it seems to be missing.  This emulation implements
* a delay loop with (really) approximate timing; not perfect but it gets the job done.
*
* @param	usec is the requested delay in microseconds
*
* @return	*NONE*
*
* @note
* This emulation assumes that the microblaze is running @ 100MHz and takes 15 clocks
* per iteration - this is probably totally bogus but it's a start.
*
*****************************************************************************/

static const u32	DELAY_1US_CONSTANT	= 50;	// constant for 1 microsecond delay

int usleep(u32 usec)
{
	volatile u32 i, j;

	for (i = 0; i < usec; i++)
	{
		for (j = 0; j < DELAY_1US_CONSTANT; j++);
	}
	return;
}

